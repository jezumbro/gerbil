function [] = makeVplusCode(param,output)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
if isfield(output,'file_path')
    if ~endsWith(output.file_path, '/')
        output.file_path = [output.file_path, '/'];
    end
else
    output.file_path = [pwd '/'];
end
min_distance = 0.5;
min_print_distance = 1;
%% Movement declariation
print.turnon = 4;
print.keep = 2;
print.turnoff = 4;
print.move = 2;
output.pts(1,5) = 2;
fprintf('Calc. Vplus code...')
for n = 2:1:size(output.pts,1)
    if output.pts(n,4) && ~output.pts(n-1,4) % turn on print
        output.pts(n,5) = print.turnon;
    elseif output.pts(n,4) && output.pts(n-1,4) % keep printing
        output.pts(n,5) = print.keep;
    elseif ~output.pts(n,4) && output.pts(n-1,4) % turn off print
        output.pts(n,5) = print.turnoff;
    else % general moves
        output.pts(n,5) = print.move;
    end
end
fprintf('\tdone\n')
fprintf('Calc. Vplusfiles...')
output.pts(:,6) = cumsum(output.pts(:,5));
if size(output.pts(:,6),1) < 9500
    index(1) = size(output.pts(:,6),1);
else
    index(1) = find(output.pts(:,6)>9500,1,'first');
end
n = 2;
while index(n-1) ~= size(output.pts,1)
    temp = cumsum(output.pts(index(n-1):end,5));
    if max(temp) > 9500
        index(n) = find(temp > 9500,1,'first')+index(n-1);
    else
        index(n) = size(output.pts,1);
    end
    %fprintf(['Index ' num2str(index(n)) '\t' num2str(size(output.pts,1)) '\n'])
    n = n + 1;
end
fprintf('\tdone\n')
fprintf('Writing files...')
for n = 1:size(index,2)
    fprintf([' ' num2str(n)])
    pt_end = index(n);
    fid=fopen([output.file_path output.file_name '_'...
        num2str(n) '.v2'],'w');
    fprintf(fid,['.PROGRAM ' output.file_name '_'...
        num2str(n) '()\n']);
    if n == 1
        fprintf(fid,['SPEED transpeed, 100 MMPS\n'...
            'MOVES origin:TRANS('...
            num2str(output.pts(n,1)) ',' ...
            num2str(output.pts(n,2)) ',' ...
            num2str(output.pts(n,3)) '):rot\n']);
        pt_st = 2;
    else
        pt_st = index(n-1)+1;
    end
    l = 1;
    for m =pt_st:1:pt_end
        distance = norm(diff(output.pts(l:m,1:3)));
        if output.pts(m,4) && ~output.pts(m-1,4) % turn on print
            temp = [...
                'MOVES origin:TRANS('...
                num2str(output.pts(m,1)) ',' ...
                num2str(output.pts(m,2)) ',' ...
                num2str(output.pts(m,3)) '):rot\n'...
                'BREAK\n'...
                'SIGNAL (100)\n'...
                'DELAY pumpdelaytime\n'...
                ];
            l = m;
        elseif output.pts(m,4) && output.pts(m-1,4) % keep printing
            if distance < min_distance
                temp = ''; % print nothing
            elseif distance < min_print_distance
                temp = ['MOVES origin:TRANS('...
                    num2str(output.pts(m,1)) ',' ...
                    num2str(output.pts(m,2)) ',' ...
                    num2str(output.pts(m,3)) '):rot\n'...
                    ];
                l = m;
            else
                temp = ['MOVES origin:TRANS('...
                    num2str(output.pts(m,1)) ',' ...
                    num2str(output.pts(m,2)) ',' ...
                    num2str(output.pts(m,3)) '):rot\n'...
                    'BREAK\n'...
                    ];
                l = m;
            end
        elseif ~output.pts(m,4) && output.pts(m-1,4) % turn off print
            temp = ['MOVES origin:TRANS('...
                num2str(output.pts(m,1)) ',' ...
                num2str(output.pts(m,2)) ',' ...
                num2str(output.pts(m,3)) '):rot\n'...
                'BREAK\n'...
                'SIGNAL (-100)\n'...
                'SPEED transpeed, 100 MMPS\n'...
                ];
            l = m;
        else % general moves
            temp = ['SPEED transpeed, 100 MMPS\n'...
                'MOVES origin:TRANS('...
                num2str(output.pts(m,1)) ',' ...
                num2str(output.pts(m,2)) ',' ...
                num2str(output.pts(m,3)) '):rot\n'...
                ];
            l = m;
        end
        fprintf(fid,temp);
    end
    if n == size(index,2)
        fprintf(fid,'MOVES origin:TRANS(0,0,10):rot\n');
    end
    fprintf(fid,'.END\n');
    fclose(fid);
end
fprintf('\tdone\n');fprintf('Write Main file...')
fid=fopen([output.file_path output.file_name '_main.v2'],'w');
%Print setup information
header = ['.PROGRAM ' output.file_name '_main()\n'...
    '; Adept Cobra 3D printer\n'...
    ';\n'...
    '; Printing Parameters for ' output.file_name ':\n'...
    ';\n'...
    '; THETA: ' num2str(rad2deg(param.theta)) '\n'...
    ';\n'...
    '; PERIMETER: ' num2str(param.perimeter)  '\n'...
    ';\n'...
    '; LINE WIDTH: ' num2str(param.line_width) '\n'...
    ';\n'...
    '; LINE HEIGHT: ' num2str(param.line_height) '\n'...
    ';\n'...
    '; HOVER HEIGHT: ' num2str(param.hover_height) '\n'...
    ';\n'...
    'pumpdelaytime = ' num2str(param.pumpdelay) '\n'...
    ';\n'...
    'printspeed = ' num2str(param.printspeed) '\n'...
    ';\n'...
    'transpeed = ' num2str(param.transpeed) '\n'...
    ';\n'...
    '; MISC:  Program created in ACE version 3.6.3.100\n'...
    ';\n'...
    '; teach points a and b then decompose them into an array\n'...
    '; point a is origin \n'...
    '; point b is x-axis furthest point\n'...
    ];
translation = ['; Begin determining the origin of the build plate\n'...
    'DECOMPOSE arraya[1] = pointa\n'...
    'DECOMPOSE arrayb[1] = pointb\n'...
    'arrayc[1] = arraya[1]\n'...
    'arrayc[2] = arraya[2]\n'...
    'arrayc[3] = arraya[3]\n'...
    'arrayc[4] = arrayb[4]\n'...
    'arrayc[5] = arrayb[5]\n'...
    'angle = ATAN2((arrayb[2]-arraya[2]),(arrayb[1]-arraya[1]))\n'...
    '\n'...
    ';Set tool transformation, origin, and define robot translation\n'...
    'TOOL TRANS(0,-96.78,-19.5,angle,0,0)\n'...
    'SET origin = TRANS(arrayc[1],arrayc[2],arrayc[3],angle,0,0)\n'...
    'SET rot = TRANS(0,0,0,0,180,0)\n'...
    '\n;set acceleration and translation speed\n'...
    'ACCEL (0) 3500, 3500\n'...
    'SPEED printspeed, 100 MMPS ALWAYS\n'...
    'SPEED transpeed, 100 MMPS\n'...
    'MOVE origin:TRANS(0,0,10):rot\n'...
    'DELAY 2\n'...
    '\n'];

fprintf(fid,header);
fprintf(fid,translation);
fprintf(fid,';begin move commands\n');
for n = 1:size(index,2)
    fprintf(fid,['CALL ' output.file_name '_' num2str(n) '()\n']);
end
fprintf(fid,'.END\n');
fclose(fid);
fprintf('\tdone\n')
end

